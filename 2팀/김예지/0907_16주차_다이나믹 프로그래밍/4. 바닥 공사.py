n = int(input())

# IDEA : 2 x 2와 2 x 1로 채울 수 있는 경우의 수를 구한다.

# 2 x 2 a개로만 채울 수 있는 경우:
    # 2 x 2는 2 x 1 두 개 or 1 x 2 두 개, 2 x 2 1개, 총 3가지 방법으로 표현되므로 답은 3의 a제곱
# 2 x 2 a개와 2 x 1 1개로 채울 수 있는 경우:
    # 먼저 2 x 2 타일 a개를 자유롭게 깔고 2 x 1타일을 끼워넣을 곳을 정한다. 총 a + 1곳이다.
    # 모두 2 x 1로 채워지는 경우를 고려하면 답은 3의 a제곱 x (a+1) - 1

# a = int(n / 2)

# if n % 2 == 0:
#     result = 3 ** a
# else:
#     result = 3 ** a * (a + 1) - 1

# print(result % 796796)
# 문제 : 이것도 다이나믹 프로그래밍 기법은 아니다

# 해답 : 이 문제도 왼쪽부터 처리해서 다음 타일을 깔 때 왼쪽의 상황은 신경쓰지 않도록 한다.

d = [0] * 1001

d[1] = 1
d[2] = 3
for i in range(3, n + 1):
    d[i] = (d[i - 1] + 2 * d[i - 2]) % 796796

print(d[n])