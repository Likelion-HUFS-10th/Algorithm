#영준님
1. 다음 알고리즘을 빅오 표기법에 따라 시간 복잡도가 낮은 순서로 나열하시오

1.	버블 정렬
2.	이진 탐색 알고리즘
3.	퀵 정렬
4.	스택의 push/pop
5.	입력된 원소로 만들 수 있는 모든 순열

답: 4 2 3 1 5


2. 다음은 동물과 그 새끼의 명칭을 딕셔너리 자료형으로 표현한 것이다
animal = {"닭":"병아리",
          "개":"강아지",
          "곰":"능소니",
          "고등어":"고도리",
          "명태":"노가리",
          "말":"망아지",
          "호랑이":"개호주"}
딕셔너리 자료 내에서 부모의 명칭을 모두 출력하고, 그 중 하나를 입력받아 새끼의 명칭을 출력하는 프로그램을 만드시오. 
단 ‘끝’을 입력할 시 프로그램은 종료되며, 저장되지 않은 동물을 입력할 시 확인 후 다시 입력을 해달라는 문구를 출력한다

답:
animal = {"닭":"병아리",
          "개":"강아지",
          "곰":"능소니",
          "고등어":"고도리",
          "명태":"노가리",
          "말":"망아지",
          "호랑이":"개호주"}

a= list(animal.keys())
q1= input(str(a) +"중 새끼 이름을 알고 싶은 동물은?")

if a in animal:
    print("<{0}>의 새끼는 <{1}>입니다.". format(q1, animal.gets(a))
elif a=="끝":
    break
else:
    print("그런 동물이 없습니다. 확인해보세요.")
    
    
- 왜 또 에러가..??(multiple statements found)



#소연님
4장) 빅오 표기법과 자료형에 관한 다음 설명 중 틀린 것은?
① 빅오 표기법은 알고리즘 간의 효율성을 비교하여 성능을 분석하기 위해 사용되고 주로 시간복잡도가 사용된다.
② 알고리즘의 시간복잡도는 알고리즘이 수행하는 기본적인 연산 횟수를 입력 크기에 대한 함수로 표현한다.
③ n^2 = O(n^3)
④ word = “apple” 이후에 word = “banana”를 입력했다면 word의 값은 “banana”로 변경되었다.
⑤ 파이썬 자료형 중에 리스트, 집합, 딕셔너리는 가변 객체이다.

답: 3
->n^2 = O(n^2)

5장) 영단어를 입력 받아 자음과 모음을 구별하는 프로그램을 작성하세요.
조건1) 리스트 컴프리핸션을 사용하세요.
조건2) 함수 def를 사용하세요.
조건3) 입력 예시 : “algorithm” / 출력 예시 : [“a : 모음”, “l : 자음”, “g : 자음”, “o : 모음”, “r : 자음”, “i : 모음”, “t : 자음”, “h : 자음”, “m : 자음”]

답:

def ask():
    word= str(input())
    WordList=[]
    for i in word:
        if i=='a' or i=='e' or i=='i' or i=='o' or i=='u':
            WordList.append("{0}: 모음". format(i))
        else:
             WordList.append("{0}: 자음". format(i))

    print(WordList)


ask()

-def 처음 써봄
- 근데 자꾸 오류가 뜰까요 ㅠㅠ....



#호연님
1. for 문을 이용해 O(2^n)과 O(n^2)의 처리 소요시간을 print()를 이용해 비교해보세요.
   (n in range(1, 20))

답:
for n in range(1,20):
    print(n**2, 2**n) 
1 2
4 4
9 8
16 16
25 32
36 64
49 128
64 256
81 512
100 1024
121 2048
144 4096
169 8192
196 16384
225 32768
256 65536
289 131072
324 262144
361 524288


2. 파이썬은 다양한 자료형을 단일 리스트에 저장하고 접근할 수 있습니다. 그것이 가능한 이유를 파이썬에서의 리스트가 구현되는 방식을 통해 서술해주세요.

답: 파이썬은 편리와 기능을 위해 속도를 포기하는 방향으로 발달했다. 자료형의 크기는 서로 다르기 때문에 연속된 메모리 공간에 할당하는 것은 불가능하고, 이 때문에 각각의 객체에 대한 참조로 구현된다.
