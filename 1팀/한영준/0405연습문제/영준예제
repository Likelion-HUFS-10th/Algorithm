4장 예제

다음 알고리즘을 빅오 표기법에 따라 시간 복잡도가 낮은 순서로 나열하시오

1.	버블 정렬
2.	이진 탐색 알고리즘
3.	퀵 정렬
4.	스택의 push/pop
5.	입력된 원소로 만들 수 있는 모든 순열

    ->

    4. 스택의 push/pop (O(1)): 입력 크기와 상관없이 고정된 시간으로 계산하는 상수 시간 알고리즘이다
    2. 이진 탐색 알고리즘 (O(logn)): 알고리즘의 실행 시간이 입력 크기의 로그에 비례하며,
        알고리즘 각 단계에서 입력의 절반 가량을 방문하지 않고 지나간다.
    3. 퀵 정렬 (O(nlogn)) : 알고리즘의 실행 시간이 입력 크기와 입력크기의 로그 곱에 비례하며,
        입력의 일부로 나눌 때 마다 각 부분을 독립적으로 처리한다.
    1. 버블 정렬 (O(n^2)) : 알고리즘의 실행 시간이 입력 크기의 제곱에 비례하며,
        각 원소를 다른 모든 원소와 비교한다
    5. 입력된 원소로 만들 수 있는 모든 순열 (O(n!)) : 시간 복잡도가 가장 큰 형태인 계승 알고리즘이다.


5장 예제

다음은 동물과 그 새끼의 명칭을 딕셔너리 자료형으로 표현한 것이다

animal = {"닭":"병아리",
          "개":"강아지",
          "곰":"능소니",
          "고등어":"고도리",
          "명태":"노가리",
          "말":"망아지",
          "호랑이":"개호주"}

딕셔너리 자료 내에서 부모의 명칭을 모두 출력하고, 
그 중 하나를 입력받아 새끼의 명칭을 출력하는 프로그램을 만드시오

단 ‘끝’을 입력할 시 프로그램은 종료되며, 
저장되지 않은 동물을 입력할 시 확인 후 다시 입력을 해달라는 문구를 출력한다

->

animal = {"닭":"병아리",
          "개":"강아지",
          "곰":"능소니",
          "고등어":"고도리",
          "명태":"노가리",
          "말":"망아지",
          "호랑이":"개호주"}

while (True) :
    mom = input(str(list(animal.keys())) + " 중 새끼 이름을 알고싶은 동물은? ")

    if mom in animal :
        print("<%s>의 새끼는 <%s>입니다." %(mom, animal.get(mom)))
    elif mom == "끝" :
        break
    else :
        print("그런 동물이 없습니다. 확인해 보세요.")
          
